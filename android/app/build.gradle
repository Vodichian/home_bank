plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

//def keystorePropertiesFile = rootProject.file('../key.properties') // Path relative to app/build.gradle (points to android/key.properties)
def keystorePropertiesFile = new File(project.projectDir.parentFile, "key.properties")

def keystoreProperties = new Properties()
if (keystorePropertiesFile.exists()) {
    try { // Add try-catch for loading
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    } catch (Exception e) {
        println "DEBUG: Error loading keystoreProperties: ${e.getMessage()}" // DEBUG LINE
    }
} else {
    println "DEBUG: keystorePropertiesFile does not exist (checked from app/build.gradle)." // DEBUG LINE
}

android {
    namespace = "com.vodichian.home_bank"
    compileSdk = flutter.compileSdkVersion
//    ndkVersion = flutter.ndkVersion
    ndkVersion = "27.0.12077973"

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId = "com.vodichian.home_bank"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName
    }

    signingConfigs {
        release {
            if (keystorePropertiesFile.exists() && keystoreProperties.containsKey('storeFile')) {
                // Add check for key too
                storeFile file(keystoreProperties['storeFile']) // Resolves relative to android/app
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
            } else {
                println("Warning: keystoreProperties or storeFile key is missing. Release build will likely fail or be unsigned.")
                // To make the build explicitly fail if signing info is missing:
                // throw new GradleException("Signing information is missing. Cannot build release.")
            }
        }
    }

    buildTypes {
        release {
            // Signing with the debug keys for now, so `flutter run --release` works.
//            signingConfig = signingConfigs.debug
            signingConfig = signingConfigs.release
        }
    }
}

flutter {
    source = "../.."
}
